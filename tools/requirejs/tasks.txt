- Update jquery patch for require.isDone check in jquery ready for the case when
  a $().ready call is made before all modules are evaluated, particularly if
  the $().ready call is done inside a module callback that is not at the top
  of the dependency chain (like dojo.parser in Dojo)
  
Differences with rcgill's fork. Master has:
- Checks for existing require, exits out.
- Allows config via a require object.

- Use JSDoc to document a full module?

- build issue: module defined like so:
require.def(
  "dimple",
  {
    color: "dimple-blue"
  }
);
will get an extra require("dimple", function(){}) output in a layer. Because it does not get tracked
by require.modulesWithNames. See simple.build.js.

- Fix build.bat on windows.

- Expand tests for no head tag, slow connection. Put require.js in a div inside body, or head tag after
body etc...

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- Talking with Bryan: onScriptLoad is not really needed in a pure require() case, maybe
allow at least a build pragma to exclude it.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

- Specifying locale: root for a build layer puts the root bundles in the layer,
but something weird is going on, where they still seem to be requested? And the browser
gets really slow up at the end (in FF)?

- Determine if document.write helps with Operation Aborted in IE.

- Add CSS optimization support (from dojo) to build tool.

- Document build tool.

- Rhino tests.

- Build converters that can convert dojo and commonjs modules into require.js format.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and require.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Use . instead of ! for file extensions for text! dependencies? It is tempting, but it gives
  mixed guidance for things like .js files. When a dependency ends in .js it is loaded
  relative to the page's URL. However, text! extensions should always use the baseUrl/config.paths
  paths. So leaving the separator as ! or now.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.
